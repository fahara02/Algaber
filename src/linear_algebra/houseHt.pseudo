// Implementation of Algorithm 6 and Algorithm 3 for Hessenberg-triangular reduction

// Householder reflector generation
template <Arithmetic T, typename StoragePolicy>
Matrix<T, StoragePolicy> Matrix<T, StoragePolicy>::householder_vector(const Matrix<T, StoragePolicy>& x, T& beta) {
    size_t n = x.rows();
    Matrix<T, StoragePolicy> v = x.clone();
    
    T sigma = 0;
    for (size_t i = 1; i < n; i++) {
        sigma += v(i, 0) * v(i, 0);
    }
    
    v(0, 0) = 1;
    
    if (sigma == 0 && v(0, 0) >= 0) {
        beta = 0;
        return v;
    }
    
    T mu = std::sqrt(v(0, 0) * v(0, 0) + sigma);
    if (v(0, 0) <= 0) {
        v(0, 0) = v(0, 0) - mu;
    } else {
        v(0, 0) = -sigma / (v(0, 0) + mu);
    }
    
    beta = 2 * v(0, 0) * v(0, 0) / (sigma + v(0, 0) * v(0, 0));
    v = v / v(0, 0);
    return v;
}

// Apply Householder reflector from the left: A = (I - beta*v*v^T)A
template <Arithmetic T, typename StoragePolicy>
void Matrix<T, StoragePolicy>::apply_householder_left(const Matrix<T, StoragePolicy>& v, T beta, Matrix<T, StoragePolicy>& A) {
    // w = beta * A^T * v
    Matrix<T, StoragePolicy> w = beta * (A.transpose() * v);
    // A = A - v * w^T
    A = A - v * w.transpose();
}

// Apply Householder reflector from the right: A = A(I - beta*v*v^T)
template <Arithmetic T, typename StoragePolicy>
void Matrix<T, StoragePolicy>::apply_householder_right(Matrix<T, StoragePolicy>& A, const Matrix<T, StoragePolicy>& v, T beta) {
    // w = beta * A * v
    Matrix<T, StoragePolicy> w = beta * (A * v);
    // A = A - w * v^T
    A = A - w * v.transpose();
}

// Algorithm 3: Householder reflector based HT reduction
template <Arithmetic T, typename StoragePolicy>
std::tuple<Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>> 
Matrix<T, StoragePolicy>::householder_ht_reduction(const Matrix<T, StoragePolicy>& A_in, const Matrix<T, StoragePolicy>& B_in) {
    if (!A_in.is_square() || !B_in.is_square() || A_in.rows() != B_in.rows())
        throw std::invalid_argument("Matrices A and B must be square and of the same size");
    
    size_t n = A_in.rows();
    
    // Create copies to work with
    Matrix<T, StoragePolicy> A = A_in.clone();
    Matrix<T, StoragePolicy> B = B_in.clone();
    
    // Initialize Q and Z as identity matrices
    Matrix<T, StoragePolicy> Q = Matrix<T, StoragePolicy>::identity(n);
    Matrix<T, StoragePolicy> Z = Matrix<T, StoragePolicy>::identity(n);
    
    // Step 2: Calculate the first Householder reflector H1 for B
    Matrix<T, StoragePolicy> B_col = B.get_column(0);
    T beta1;
    Matrix<T, StoragePolicy> v1 = householder_vector(B_col, beta1);
    
    // Step 3: Apply H1 to A and B from the left and to Q from the right
    apply_householder_left(v1, beta1, A);
    apply_householder_left(v1, beta1, B);
    apply_householder_right(Q, v1, beta1);
    
    // Steps 4-10: Main loop for j = 1 to n-2
    for (size_t j = 0; j < n - 2; j++) {
        // Step 5: Calculate Householder reflector H2 for A
        Matrix<T, StoragePolicy> A_col = A.view(j+1, j, n-(j+1), 1);
        T beta2;
        Matrix<T, StoragePolicy> v2 = householder_vector(A_col, beta2);
        
        // Step 6: Apply H2 to A and B from the left and to Q from the right
        Matrix<T, StoragePolicy> A_block = A.view(j+1, j, n-(j+1), n-j);
        apply_householder_left(v2, beta2, A_block);
        A.set_block(j+1, j, A_block);
        
        Matrix<T, StoragePolicy> B_block = B.view(j+1, j, n-(j+1), n-j);
        apply_householder_left(v2, beta2, B_block);
        B.set_block(j+1, j, B_block);
        
        Matrix<T, StoragePolicy> Q_block = Q.view(0, j+1, n, n-(j+1));
        apply_householder_right(Q_block, v2, beta2);
        Q.set_block(0, j+1, Q_block);
        
        // Step 7: Solve the linear system B_{j+1:n, j+1:n} * x = e1
        Matrix<T, StoragePolicy> B_submatrix = B.view(j+1, j+1, n-(j+1), n-(j+1));
        Matrix<T, StoragePolicy> e1 = Matrix<T, StoragePolicy>::unit_vector(n-(j+1), 0);
        Matrix<T, StoragePolicy> x = B_submatrix.solve(e1);
        
        // Step 8: Calculate Householder reflector H3 for x
        T beta3;
        Matrix<T, StoragePolicy> v3 = householder_vector(x, beta3);
        
        // Step 9: Apply H3 to A, B, and Z from the right
        Matrix<T, StoragePolicy> A_right_block = A.view(0, j+1, n, n-(j+1));
        apply_householder_right(A_right_block, v3, beta3);
        A.set_block(0, j+1, A_right_block);
        
        Matrix<T, StoragePolicy> B_right_block = B.view(0, j+1, n, n-(j+1));
        apply_householder_right(B_right_block, v3, beta3);
        B.set_block(0, j+1, B_right_block);
        
        Matrix<T, StoragePolicy> Z_right_block = Z.view(0, j+1, n, n-(j+1));
        apply_householder_right(Z_right_block, v3, beta3);
        Z.set_block(0, j+1, Z_right_block);
    }
    
    return {A, B, Q, Z};
}

// Algorithm 6: Full Hessenberg-triangular reduction with preprocessing and iterative refinement
template <Arithmetic T, typename StoragePolicy>
std::tuple<Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>> 
Matrix<T, StoragePolicy>::hessenberg_triangular_reduction(const Matrix<T, StoragePolicy>& A_in, const Matrix<T, StoragePolicy>& B_in, 
                                                         T epsilon, T tol, size_t max_iter) {
    if (!A_in.is_square() || !B_in.is_square() || A_in.rows() != B_in.rows())
        throw std::invalid_argument("Matrices A and B must be square and of the same size");
    
    size_t n = A_in.rows();
    
    // Create copies to work with
    Matrix<T, StoragePolicy> A = A_in.clone();
    Matrix<T, StoragePolicy> B = B_in.clone();
    
    // Step 1: Initialize k
    size_t k = 0;
    
    // Step 2: Calculate the RRRQ decomposition of B
    // For simplicity, we'll use QR decomposition of B^T, which gives B = P*R*Z
    Matrix<T, StoragePolicy> B_T = B.transpose();
    auto [Q_B, R_B] = B_T.qr_decomposition();
    Matrix<T, StoragePolicy> P = Q_B;
    Matrix<T, StoragePolicy> Zc = R_B.transpose();
    
    // Steps 3-4: Update A and B
    A = P * A * Zc;
    B = P * B * Zc;
    
    // Steps 5-6: Initialize Q and Z
    Matrix<T, StoragePolicy> Q = P.transpose();
    Matrix<T, StoragePolicy> Z = Zc;
    
    // Calculate norm of B for comparison
    T B_norm = B.frobenius_norm();
    
    // Steps 7-10: Handle small diagonal elements in B
    while (k < n && std::abs(B(k, k)) < epsilon * B_norm) {
        // Step 8: Reduce a single column using appropriate HT reduction
        // This would typically use Algorithm 3 for the specific column
        Matrix<T, StoragePolicy> A_sub = A.view(k, k, n-k, n-k);
        Matrix<T, StoragePolicy> B_sub = B.view(k, k, n-k, n-k);
        
        auto [A_reduced, B_reduced, Q_k, Z_k] = householder_ht_reduction_single_column(A_sub, B_sub, k);
        
        // Update the matrices
        A.set_block(k, k, A_reduced);
        B.set_block(k, k, B_reduced);
        
        // Update Q and Z
        Matrix<T, StoragePolicy> Q_full = Matrix<T, StoragePolicy>::identity(n);
        Matrix<T, StoragePolicy> Z_full = Matrix<T, StoragePolicy>::identity(n);
        
        Q_full.set_block(k, k, Q_k);
        Z_full.set_block(k, k, Z_k);
        
        Q = Q * Q_full;
        Z = Z * Z_full;
        
        // Step 9: Increment k
        k++;
    }
    
    // Steps 11-24: Main iterative refinement loop
    bool is_hessenberg = false;
    size_t iter_count = 0;
    
    while (!is_hessenberg && iter_count < max_iter) {
        // Step 12: Compute X = Ak:n,k:n * inv(Bk:n,k:n)
        Matrix<T, StoragePolicy> A_sub = A.view(k, k, n-k, n-k);
        Matrix<T, StoragePolicy> B_sub = B.view(k, k, n-k, n-k);
        Matrix<T, StoragePolicy> X = A_sub * B_sub.inverse();
        
        // Step 13: Calculate Qc so that Qc^T * X * Qc is Hessenberg
        auto [H, Qc] = X.hessenberg_decomposition();
        
        // Steps 14-16: Update A, B, and Q
        // Apply Qc^T from the left to A and B, and Qc from the right to Q
        Matrix<T, StoragePolicy> A_left = A.view(k, 0, n-k, n);
        A_left = Qc.transpose() * A_left;
        A.set_block(k, 0, A_left);
        
        Matrix<T, StoragePolicy> B_left = B.view(k, 0, n-k, n);
        B_left = Qc.transpose() * B_left;
        B.set_block(k, 0, B_left);
        
        Matrix<T, StoragePolicy> Q_right = Q.view(0, k, n, n-k);
        Q_right = Q_right * Qc;
        Q.set_block(0, k, Q_right);
        
        // Step 17: Calculate Zc so that Bk:n,k:n * Zc is upper triangular
        // For simplicity, we can use QR decomposition of B_sub^T
        B_T = B_sub.transpose();
        auto [Q_B_sub, R_B_sub] = B_T.qr_decomposition();
        Matrix<T, StoragePolicy> Zc_sub = Q_B_sub;
        
        // Steps 18-20: Update A, B, and Z
        Matrix<T, StoragePolicy> A_right = A.view(0, k, n, n-k);
        A_right = A_right * Zc_sub;
        A.set_block(0, k, A_right);
        
        Matrix<T, StoragePolicy> B_right = B.view(0, k, n, n-k);
        B_right = B_right * Zc_sub;
        B.set_block(0, k, B_right);
        
        Matrix<T, StoragePolicy> Z_right = Z.view(0, k, n, n-k);
        Z_right = Z_right * Zc_sub;
        Z.set_block(0, k, Z_right);
        
        // Steps 21-23: Check for convergence and update k if necessary
        bool subdiagonal_small = true;
        for (size_t i = k + 2; i < n; i++) {
            if (std::abs(A(i, k)) > tol) {
                subdiagonal_small = false;
                break;
            }
        }
        
        if (subdiagonal_small) {
            k++;
        }
        
        // Check if A is in Hessenberg form
        is_hessenberg = true;
        for (size_t i = 0; i < n; i++) {
            for (size_t j = 0; j < i - 1; j++) {
                if (std::abs(A(i, j)) > tol) {
                    is_hessenberg = false;
                    break;
                }
            }
            if (!is_hessenberg) break;
        }
        
        iter_count++;
    }
    
    return {A, B, Q, Z};
}

// Helper function for reducing a single column in Algorithm 6
template <Arithmetic T, typename StoragePolicy>
std::tuple<Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>> 
Matrix<T, StoragePolicy>::householder_ht_reduction_single_column(
    const Matrix<T, StoragePolicy>& A_sub, const Matrix<T, StoragePolicy>& B_sub, size_t col_idx) {
    
    size_t n = A_sub.rows();
    
    // Create copies to work with
    Matrix<T, StoragePolicy> A = A_sub.clone();
    Matrix<T, StoragePolicy> B = B_sub.clone();
    
    // Initialize Q and Z as identity matrices
    Matrix<T, StoragePolicy> Q = Matrix<T, StoragePolicy>::identity(n);
    Matrix<T, StoragePolicy> Z = Matrix<T, StoragePolicy>::identity(n);
    
    // This is a simplified version that focuses only on reducing column col_idx
    
    // Calculate Householder reflector for column col_idx
    Matrix<T, StoragePolicy> A_col = A.get_column(col_idx).view(col_idx+1, 0, n-(col_idx+1), 1);
    T beta;
    Matrix<T, StoragePolicy> v = householder_vector(A_col, beta);
    
    // Create full-sized reflector vector padded with zeros
    Matrix<T, StoragePolicy> v_full = Matrix<T, StoragePolicy>::zeros(n, 1);
    for (size_t i = 0; i < v.rows(); i++) {
        v_full(col_idx+1+i, 0) = v(i, 0);
    }
    
    // Apply the reflector
    apply_householder_left(v_full, beta, A);
    apply_householder_left(v_full, beta, B);
    apply_householder_right(Q, v_full, beta);
    
    // Make B upper triangular in this column range
    // For each row below the diagonal, eliminate the element
    for (size_t i = col_idx + 1; i < n; i++) {
        if (std::abs(B(i, col_idx)) > 1e-12) {
            // Create a Givens rotation to eliminate B(i, col_idx)
            T c, s;
            T r = std::hypot(B(col_idx, col_idx), B(i, col_idx));
            c = B(col_idx, col_idx) / r;
            s = -B(i, col_idx) / r;
            
            // Apply the Givens rotation to rows col_idx and i of B
            for (size_t j = col_idx; j < n; j++) {
                T temp = c * B(col_idx, j) - s * B(i, j);
                B(i, j) = s * B(col_idx, j) + c * B(i, j);
                B(col_idx, j) = temp;
            }
            
            // Apply the Givens rotation to rows col_idx and i of A
            for (size_t j = 0; j < n; j++) {
                T temp = c * A(col_idx, j) - s * A(i, j);
                A(i, j) = s * A(col_idx, j) + c * A(i, j);
                A(col_idx, j) = temp;
            }
            
            // Update Q to account for this transformation
            for (size_t j = 0; j < n; j++) {
                T temp = c * Q(j, col_idx) - s * Q(j, i);
                Q(j, i) = s * Q(j, col_idx) + c * Q(j, i);
                Q(j, col_idx) = temp;
            }
        }
    }
    
    return {A, B, Q, Z};
}

// Utility methods required by the algorithms

// Identity matrix
template <Arithmetic T, typename StoragePolicy>
Matrix<T, StoragePolicy> Matrix<T, StoragePolicy>::identity(size_t n) {
    return Matrix<T, StoragePolicy>(n, n, [](size_t i, size_t j) { return i == j ? T(1) : T(0); });
}

// Unit vector (e_i)
template <Arithmetic T, typename StoragePolicy>
Matrix<T, StoragePolicy> Matrix<T, StoragePolicy>::unit_vector(size_t n, size_t i) {
    Matrix<T, StoragePolicy> vec(n, 1, T(0));
    vec(i, 0) = T(1);
    return vec;
}

// Frobenius norm
template <Arithmetic T, typename StoragePolicy>
T Matrix<T, StoragePolicy>::frobenius_norm() const {
    T sum = T(0);
    for (size_t i = 0; i < view_rows_; i++) {
        for (size_t j = 0; j < view_cols_; j++) {
            sum += operator()(i, j) * operator()(i, j);
        }
    }
    return std::sqrt(sum);
}

// QR decomposition
template <Arithmetic T, typename StoragePolicy>
std::tuple<Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>> 
Matrix<T, StoragePolicy>::qr_decomposition() const {
    if (view_rows_ < view_cols_)
        throw std::invalid_argument("QR decomposition requires rows >= columns");
    
    size_t m = view_rows_;
    size_t n = view_cols_;
    
    Matrix<T, StoragePolicy> Q = Matrix<T, StoragePolicy>::identity(m);
    Matrix<T, StoragePolicy> R = this->clone();
    
    for (size_t j = 0; j < n; j++) {
        // Extract column
        Matrix<T, StoragePolicy> x = R.view(j, j, m-j, 1);
        
        // Compute Householder reflection
        T beta;
        Matrix<T, StoragePolicy> v = householder_vector(x, beta);
        
        // Apply to R
        Matrix<T, StoragePolicy> R_sub = R.view(j, j, m-j, n-j);
        apply_householder_left(v, beta, R_sub);
        R.set_block(j, j, R_sub);
        
        // Apply to Q
        Matrix<T, StoragePolicy> Q_sub = Q.view(0, j, m, m-j);
        apply_householder_right(Q_sub, v, beta);
        Q.set_block(0, j, Q_sub);
    }
    
    return {Q, R};
}

// Hessenberg decomposition
template <Arithmetic T, typename StoragePolicy>
std::tuple<Matrix<T, StoragePolicy>, Matrix<T, StoragePolicy>> 
Matrix<T, StoragePolicy>::hessenberg_decomposition() const {
    if (!is_square())
        throw std::invalid_argument("Hessenberg decomposition requires a square matrix");
    
    size_t n = view_rows_;
    Matrix<T, StoragePolicy> H = this->clone();
    Matrix<T, StoragePolicy> Q = Matrix<T, StoragePolicy>::identity(n);
    
    for (size_t k = 0; k < n - 2; k++) {
        // Extract column
        Matrix<T, StoragePolicy> x = H.view(k+1, k, n-(k+1), 1);
        
        // Compute Householder reflection
        T beta;
        Matrix<T, StoragePolicy> v = householder_vector(x, beta);
        
        // Apply to H from both sides
        // First from the left: H = P * H
        Matrix<T, StoragePolicy> H_left = H.view(k+1, k, n-(k+1), n-k);
        apply_householder_left(v, beta, H_left);
        H.set_block(k+1, k, H_left);
        
        // Then from the right: H = H * P
        Matrix<T, StoragePolicy> H_right = H.view(0, k+1, n, n-(k+1));
        apply_householder_right(H_right, v, beta);
        H.set_block(0, k+1, H_right);
        
        // Update Q
        Matrix<T, StoragePolicy> Q_sub = Q.view(0, k+1, n, n-(k+1));
        apply_householder_right(Q_sub, v, beta);
        Q.set_block(0, k+1, Q_sub);
    }
    
    return {H, Q};
}

// Matrix inverse
template <Arithmetic T, typename StoragePolicy>
Matrix<T, StoragePolicy> Matrix<T, StoragePolicy>::inverse() const {
    if (!is_square())
        throw std::invalid_argument("Matrix must be square for inversion");
    
    size_t n = view_rows_;
    
    // Create augmented matrix [A|I]
    Matrix<T, StoragePolicy> aug(n, 2*n);
    for (size_t i = 0; i < n; i++) {
        for (size_t j = 0; j < n; j++) {
            aug(i, j) = operator()(i, j);
        }
        aug(i, n+i) = T(1);
    }
    
    // Perform Gaussian elimination
    for (size_t i = 0; i < n; i++) {
        // Find pivot
        size_t pivot_row = i;
        T pivot_val = std::abs(aug(i, i));
        
        for (size_t j = i + 1; j < n; j++) {
            if (std::abs(aug(j, i)) > pivot_val) {
                pivot_val = std::abs(aug(j, i));
                pivot_row = j;
            }
        }
        
        if (pivot_val < 1e-10)
            throw std::runtime_error("Matrix is singular");
        
        // Swap rows if needed
        if (pivot_row != i) {
            for (size_t j = 0; j < 2*n; j++) {
                std::swap(aug(i, j), aug(pivot_row, j));
            }
        }
        
        // Scale pivot row
        T pivot = aug(i, i);
        for (size_t j = 0; j < 2*n; j++) {
            aug(i, j) /= pivot;
        }
        
        // Eliminate other rows
        for (size_t j = 0; j < n; j++) {
            if (j != i) {
                T factor = aug(j, i);
                for (size_t k = 0; k < 2*n; k++) {
                    aug(j, k) -= factor * aug(i, k);
                }
            }
        }
    }
    
    // Extract inverse
    Matrix<T, StoragePolicy> inv(n, n);
    for (size_t i = 0; i < n; i++) {
        for (size_t j = 0; j < n; j++) {
            inv(i, j) = aug(i, n+j);
        }
    }
    
    return inv;
}

// Linear system solver
template <Arithmetic T, typename StoragePolicy>
Matrix<T, StoragePolicy> Matrix<T, StoragePolicy>::solve(const Matrix<T, StoragePolicy>& b) const {
    if (!is_square())
        throw std::invalid_argument("Coefficient matrix must be square");
    
    if (view_rows_ != b.rows())
        throw std::invalid_argument("Incompatible dimensions for system solving");
    
    size_t n = view_rows_;
    size_t m = b.cols();
    
    // Create augmented matrix [A|b]
    Matrix<T, StoragePolicy> aug(n, n+m);
    for (size_t i = 0; i < n; i++) {
        for (size_t j = 0; j < n; j++) {
            aug(i, j) = operator()(i, j);
        }
        for (size_t j = 0; j < m; j++) {
            aug(i, n+j) = b(i, j);
        }
    }
    
    // Perform Gaussian elimination with partial pivoting
    for (size_t i = 0; i < n; i++) {
        // Find pivot
        size_t pivot_row = i;
        T pivot_val = std::abs(aug(i, i));
        
        for (size_t j = i + 1; j < n; j++) {
            if (std::abs(aug(j, i)) > pivot_val) {
                pivot_val = std::abs(aug(j, i));
                pivot_row = j;
            }
        }
        
        if (pivot_val < 1e-10)
            throw std::runtime_error("Matrix is singular or nearly singular");
        
        // Swap rows if needed
        if (pivot_row != i) {
            for (size_t j = 0; j < n+m; j++) {
                std::swap(aug(i, j), aug(pivot_row, j));
            }
        }
        
        // Eliminate below
        for (size_t j = i + 1; j < n; j++) {
            T factor = aug(j, i) / aug(i, i);
            for (size_t k = i; k < n+m; k++) {
                aug(j, k) -= factor * aug(i, k);
            }
        }
    }
    
    // Back substitution
    Matrix<T, StoragePolicy> x(n, m);
    for (size_t k = 0; k < m; k++) {
        for (size_t i = n; i-- > 0; ) {
            T sum = aug(i, n+k);
            for (size_t j = i + 1; j < n; j++) {
                sum -= aug(i, j) * x(j, k);
            }
            x(i, k) = sum / aug(i, i);
        }
    }
    
    return x;
}